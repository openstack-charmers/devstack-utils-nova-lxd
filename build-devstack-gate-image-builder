#!/bin/bash

## create, configure, and build a devstack-gate image using a new builder.
# This script checks for an existing devstack-gate-image-builder instance (by name) and if
# it exists, will ask if it needs replacing.  If not, then the script exits.  A new
# devstack-gate image requires a new devstack-gate-image-builder.
# If the image exists then the user is asked if they want to delete it.

# This function relies on the keypair name being in the env variables:
# DEVSTACK_KEYPAIR_NAME  -- the name of the same keypair as below for all instances.
# DEVSTACK_SSH_IDENTITY  -- the private key file
# DEVSTACK_MODIFY_ETC_HOSTS=1 -- this will add the instance_name to /etc/hosts for easy login

_dir="$( cd "$(dirname "${BASH_SOURCE[0]}" )" && pwd)"
_script=$( basename $0 )
_keyfile_pub="${_dir}/keyfile.pub"

# bring in the common functions
source common-functions.sh

IMAGE_NAME=${IMAGE_NAME:-devstack-gate}
INSTANCE_NAME=${INSTANCE_NAME:-devstack-gate-image-builder}
UBUNTU_SERIES=${UBUNTU_SERIES:-bionic}


function usage {
	printf "\nBuild a devstack-gate image\n"
	printf "\nUSAGE:\n\n$0 [-h|--help]\n"
	printf "\nThis script ultimately builds an devstack-gate image.  It does this using\n"
	printf "a series of scripts and files in this directory.  An image builder is launched,\n"
	printf "configured and used to build the devstack-gate image.  The script checks if the\n"
	printf "builder instance and/or image already exist and asks if they should be deleted\n"
	printf "This script only builds amd64 based machines at present.\n"
	printf "\n\nwhere:\n"
	printf " -h | --help     : this usage page\n"
}


if [[ "$1" == "-h" || "$1" == "--help" ]]; then
	usage
	exit 0
fi


function check_instance_exists {
	# check if the image builder exists
	does_instance_exist ${INSTANCE_NAME}
	if [[ "$?" == "1" ]]; then
		are_you_sure "The ${INSTANCE_NAME} exists; delete it and continue (y) or exit (N)"
		if [[ "$_yes" == "1" ]]; then
			openstack server delete --wait ${INSTANCE_NAME}
		else
			echo "Not continuing."
			exit 0
		fi
	fi
}

function check_image_exists {
	# check if the image exists
	does_image_exist ${IMAGE_NAME}
	if [[ "$?" == "1" ]]; then
		are_you_sure "The ${IMAGE_NAME} exists; delete it and continue (y) or exit (N)"
		if [[ "$_yes" == "1" ]]; then
			openstack image delete ${IMAGE_NAME}
		else
			echo "Not continuing."
			exit 0
		fi
	fi
}




# main script starts here
echo -n "Checking ssh and OS_ vars ..."
assert_ssh_vars_are_set
assert_os_vars_are_set
echo " done."

echo "Checking to see if the devstack-gate-builder instance ..."
check_instance_exists

# Phase 1 - create the instance -- this also adds to /etc/hosts if configured to do so.
echo "Creating the server and applying an IP address ..."
#DONT_CONFIRM="true" $_dir/create-instance.sh ${INSTANCE_NAME} -f ${UBUNTU_SERIES}
$_dir/create-instance.sh ${INSTANCE_NAME} -f ${UBUNTU_SERIES}
echo "Done creating instance."

echo "Doing the initalisation to prepare for building the image ..."
# get the IP address of the next stage  to $floating_ip
find_floating_ip_for ${INSTANCE_NAME}
# save the public keyfile to ${_keyfile_pub}
openstack keypair show ${DEVSTACK_KEYPAIR_NAME} --public-key > ${_keyfile_pub}
$_dir/initialise-devstack-gate-image-builder.sh $floating_ip ${_keyfile_pub}
echo "Done initialising image."

# Phase 2 - initialise the instance to build the image
run_remote_cmd $DEVSTACK_SSH_IDENTITY ubuntu ${floating_ip} configure/configure.sh
#echo "Finishing early; run build and upload in the image builder"
#exit 0

# Phase 3 - build the devstack-gate image using the new devstack-gate-builder
run_remote_cmd $DEVSTACK_SSH_IDENTITY ubuntu ${floating_ip} configure/build-image.sh

echo "Checking to see if the devstack-gate instance ..."
check_image_exists

# phase 4 - upload the image to devstack
run_remote_cmd $DEVSTACK_SSH_IDENTITY ubuntu ${floating_ip} configure/upload-image.sh

echo "All done!"
